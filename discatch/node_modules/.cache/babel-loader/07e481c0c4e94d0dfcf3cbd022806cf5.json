{"ast":null,"code":"var _jsxFileName = \"/Users/jinwoojung/Desktop/Streetcatshelter_Client/discatch/src/shared/InfinityScroll.jsx\",\n    _s = $RefreshSig$();\n\n// LIBRARY\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InfinityScroll = ({\n  length,\n  children,\n  root,\n  next,\n  index\n}) => {\n  _s();\n\n  const [target, setTarget] = useState(null);\n  const isLast = index === length - 1;\n  useEffect(() => {\n    const options = {\n      threshold: 0.5,\n      root: root\n    };\n\n    const infiniteScroll = async ([entries], observer) => {\n      if (entries.isIntersecting) {\n        await next();\n        observer.unobserve(entries.target);\n      }\n    };\n\n    const io = new IntersectionObserver(infiniteScroll, options);\n    if (target) io.observe(target);\n    return () => io && io.disconnect();\n  }, [target]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: isLast ? setTarget : null,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 10\n  }, this);\n};\n\n_s(InfinityScroll, \"Xl694yrj9ezcwIHrfiUYOMi03f0=\");\n\n_c = InfinityScroll;\nexport default InfinityScroll;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfinityScroll\");","map":{"version":3,"sources":["/Users/jinwoojung/Desktop/Streetcatshelter_Client/discatch/src/shared/InfinityScroll.jsx"],"names":["React","useEffect","useState","InfinityScroll","length","children","root","next","index","target","setTarget","isLast","options","threshold","infiniteScroll","entries","observer","isIntersecting","unobserve","io","IntersectionObserver","observe","disconnect"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,QAAV;AAAoBC,EAAAA,IAApB;AAA0BC,EAAAA,IAA1B;AAAgCC,EAAAA;AAAhC,CAAD,KAA6C;AAAA;;AAClE,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,IAAD,CAApC;AACA,QAAMS,MAAM,GAAGH,KAAK,KAAKJ,MAAM,GAAG,CAAlC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMW,OAAO,GAAG;AAAEC,MAAAA,SAAS,EAAE,GAAb;AAAkBP,MAAAA,IAAI,EAAEA;AAAxB,KAAhB;;AAEA,UAAMQ,cAAc,GAAG,OAAO,CAACC,OAAD,CAAP,EAAkBC,QAAlB,KAA+B;AACpD,UAAID,OAAO,CAACE,cAAZ,EAA4B;AAC1B,cAAMV,IAAI,EAAV;AACAS,QAAAA,QAAQ,CAACE,SAAT,CAAmBH,OAAO,CAACN,MAA3B;AACD;AACF,KALD;;AAOA,UAAMU,EAAE,GAAG,IAAIC,oBAAJ,CAAyBN,cAAzB,EAAyCF,OAAzC,CAAX;AACA,QAAIH,MAAJ,EAAYU,EAAE,CAACE,OAAH,CAAWZ,MAAX;AAEZ,WAAO,MAAMU,EAAE,IAAIA,EAAE,CAACG,UAAH,EAAnB;AACD,GAdQ,EAcN,CAACb,MAAD,CAdM,CAAT;AAgBA,sBAAO;AAAK,IAAA,GAAG,EAAEE,MAAM,GAAGD,SAAH,GAAe,IAA/B;AAAA,cAAsCL;AAAtC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CArBD;;GAAMF,c;;KAAAA,c;AAuBN,eAAeA,cAAf","sourcesContent":["// LIBRARY\nimport React, { useEffect, useState } from 'react';\n\nconst InfinityScroll = ({ length, children, root, next, index }) => {\n  const [target, setTarget] = useState(null);\n  const isLast = index === length - 1;\n\n  useEffect(() => {\n    const options = { threshold: 0.5, root: root };\n\n    const infiniteScroll = async ([entries], observer) => {\n      if (entries.isIntersecting) {\n        await next();\n        observer.unobserve(entries.target);\n      }\n    };\n\n    const io = new IntersectionObserver(infiniteScroll, options);\n    if (target) io.observe(target);\n\n    return () => io && io.disconnect();\n  }, [target]);\n\n  return <div ref={isLast ? setTarget : null}>{children}</div>;\n};\n\nexport default InfinityScroll;\n"]},"metadata":{},"sourceType":"module"}