{"ast":null,"code":"// LIBRARY\nimport { createSlice } from '@reduxjs/toolkit';\nimport instance from '../../shared/axios'; // REDUX\n\nimport { imgActions } from './image'; // 커뮤니티 글 등록\n\nexport const addCommunityDB = (category, contents, location, title) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const imgFile = getState().image.file; // const username = getState().user; // 나중에 가져오기\n\n    const username = '뽀삐맘';\n    console.log(imgFile);\n    console.log(username);\n\n    if (imgFile.length) {\n      dispatch(imgActions.uploadImageDB(() => {\n        const imageUrl = getState().image.imageUrl;\n        const postInfo = {\n          categoty: category,\n          contents: contents,\n          image: imageUrl,\n          location: location,\n          title: title,\n          username: username\n        };\n        instance.post('/community/create', postInfo).then(res => {\n          dispatch(addCommunity(postInfo));\n          dispatch(imgActions.setInitialState());\n          history.push('/community');\n        }).catch(err => {\n          console.log(err);\n        });\n      }));\n    }\n\n    return;\n  };\n}; // 리뷰 가져오기\n\nexport const getCommunityDB = (limit = 10) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    instance.get(`/review?page=0&size=${limit}`).then(res => {\n      let reviewList = res.data;\n\n      if (reviewList.length < limit + 1) {\n        dispatch(getCommunity(reviewList, null));\n        return;\n      }\n\n      dispatch(getCommunity(reviewList, limit));\n    }).catch(err => {\n      window.alert('페이지에 오류가 있어요!');\n      console.log(err);\n    });\n  };\n}; // 커뮤니티 상세 가져오기\n\nexport const getOneCommunityDB = (reviewId = '') => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    instance.get(`/review/${reviewId.reviewId}`).then(res => {\n      let detailReview = res.data;\n      dispatch(getOneCommunity(detailReview));\n    }).catch(err => {\n      console.error(err);\n      console.log(reviewId);\n    });\n  };\n}; // 리뷰 수정\n\nexport const editReviewDB = (reviewId, reviewContents) => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    const imgFile = getState().image.file;\n\n    if (imgFile.length) {\n      dispatch(imgActions.uploadImageDB(() => {\n        const imageUrl = getState().image.imageUrl;\n        instance.put(`/review/${reviewId}`, {\n          reviewId: reviewId,\n          reviewContents: reviewContents,\n          reviewImage: imageUrl\n        }).then(res => {\n          window.alert('게시글 수정 완료');\n          history.replace(`/review`);\n        }).catch(err => {\n          console.error(err);\n        });\n      }));\n    }\n\n    return;\n  };\n}; // 리뷰 삭제\n\nexport const deleteCommunityDB = reviewId => {\n  return function (dispatch, getState, {\n    history\n  }) {\n    instance.delete(`/review/${reviewId.reviewId}`).then(res => {\n      dispatch(deleteCommunity(reviewId));\n      window.alert('게시물 삭제 완료');\n      history.push('/review');\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nconst initialState = {\n  list: [],\n  page: 0,\n  start: 0\n}; // 리듀서\n\nconst community = createSlice({\n  name: 'community',\n  initialState,\n  reducers: {\n    addCommunity: (state, action) => {\n      const categoty = action.payload.category;\n      const contents = action.payload.contents;\n      const image = action.payload.image;\n      const location = action.payload.location;\n      const title = action.payload.title;\n      const username = action.payload.username;\n      state.list.push(categoty, contents, image, location, title, username);\n    },\n    getCommunity: (state, action) => {\n      state.list = action.payload.content;\n      state.start = action.payload.number;\n    },\n    getMoreCommunity: (state, action) => {\n      return { ...state,\n        list: [...state.list, ...action.payload.content],\n        start: action.payload.number\n      };\n    },\n    getOneCommunity: (state, action) => {\n      state.list = action.payload;\n    },\n    editCommunity: (state, action) => {\n      console.log('수정 요청 완료!');\n    },\n    deleteCommunity: (state, action) => {\n      console.log('삭제 요청 완료!');\n    }\n  }\n});\nexport const {\n  addCommunity,\n  getCommunity,\n  editCommunity,\n  deleteCommunity,\n  getOneCommunity,\n  getMoreCommunity\n} = community.actions;\nexport default community;","map":{"version":3,"sources":["/Users/jinwoojung/Desktop/Streetcatshelter_Client/discatch/src/redux/modules/community.jsx"],"names":["createSlice","instance","imgActions","addCommunityDB","category","contents","location","title","dispatch","getState","history","imgFile","image","file","username","console","log","length","uploadImageDB","imageUrl","postInfo","categoty","post","then","res","addCommunity","setInitialState","push","catch","err","getCommunityDB","limit","get","reviewList","data","getCommunity","window","alert","getOneCommunityDB","reviewId","detailReview","getOneCommunity","error","editReviewDB","reviewContents","put","reviewImage","replace","deleteCommunityDB","delete","deleteCommunity","initialState","list","page","start","community","name","reducers","state","action","payload","content","number","getMoreCommunity","editCommunity","actions"],"mappings":"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","sourcesContent":["// LIBRARY\nimport { createSlice } from '@reduxjs/toolkit';\nimport instance from '../../shared/axios';\n\n// REDUX\nimport { imgActions } from './image';\n\n// 커뮤니티 글 등록\nexport const addCommunityDB = (category, contents, location, title) => {\n  return function (dispatch, getState, { history }) {\n    const imgFile = getState().image.file;\n    // const username = getState().user; // 나중에 가져오기\n    const username = '뽀삐맘';\n    console.log(imgFile);\n    console.log(username);\n    if (imgFile.length) {\n      dispatch(\n        imgActions.uploadImageDB(() => {\n          const imageUrl = getState().image.imageUrl;\n          const postInfo = {\n            categoty: category, \n            contents: contents, \n            image: imageUrl, \n            location: location, \n            title: title, \n            username: username,\n          };\n          instance\n            .post('/community/create', postInfo)\n            .then((res) => {\n              dispatch(addCommunity(postInfo));\n              dispatch(imgActions.setInitialState());\n              history.push('/community');\n            })\n            .catch((err) => {\n              console.log(err);\n            });\n        }),\n      );\n    }\n    return;\n  };\n};\n\n// 리뷰 가져오기\nexport const getCommunityDB = (limit = 10) => {\n  return function (dispatch, getState, { history }) {\n    instance\n      .get(`/review?page=0&size=${limit}`)\n      .then((res) => {\n        let reviewList = res.data;\n        if (reviewList.length < limit + 1) {\n          dispatch(getCommunity(reviewList, null));\n          return;\n        }\n\n        dispatch(getCommunity(reviewList, limit));\n      })\n      .catch((err) => {\n        window.alert('페이지에 오류가 있어요!');\n        console.log(err);\n      });\n  };\n};\n\n// 커뮤니티 상세 가져오기\nexport const getOneCommunityDB = (reviewId = '') => {\n  return function (dispatch, getState, { history }) {\n    instance\n      .get(`/review/${reviewId.reviewId}`)\n      .then((res) => {\n        let detailReview = res.data;\n        dispatch(getOneCommunity(detailReview));\n      })\n      .catch((err) => {\n        console.error(err);\n        console.log(reviewId);\n      });\n  };\n};\n\n// 리뷰 수정\nexport const editReviewDB = (reviewId, reviewContents) => {\n  return function (dispatch, getState, { history }) {\n    const imgFile = getState().image.file;\n    if (imgFile.length) {\n      dispatch(\n        imgActions.uploadImageDB(() => {\n          const imageUrl = getState().image.imageUrl;\n          instance\n            .put(`/review/${reviewId}`, {\n              reviewId: reviewId,\n              reviewContents: reviewContents,\n              reviewImage: imageUrl,\n            })\n            .then((res) => {\n              window.alert('게시글 수정 완료');\n              history.replace(`/review`);\n            })\n            .catch((err) => {\n              console.error(err);\n            });\n        }),\n      );\n    }\n    return;\n  };\n};\n\n// 리뷰 삭제\nexport const deleteCommunityDB = (reviewId) => {\n  return function (dispatch, getState, { history }) {\n    instance\n      .delete(`/review/${reviewId.reviewId}`)\n      .then((res) => {\n        dispatch(deleteCommunity(reviewId));\n        window.alert('게시물 삭제 완료');\n        history.push('/review');\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n};\n\nconst initialState = {\n  list: [],\n  page: 0,\n  start: 0,\n};\n\n// 리듀서\nconst community = createSlice({\n  name: 'community',\n  initialState,\n  reducers: {\n    addCommunity: (state, action) => {\n      const categoty = action.payload.category;\n      const contents = action.payload.contents;\n      const image = action.payload.image;\n      const location = action.payload.location;\n      const title = action.payload.title\n      const username = action.payload.username\n      state.list.push(categoty, contents, image, location, title, username);\n    },\n\n    getCommunity: (state, action) => {\n      state.list = action.payload.content;\n      state.start = action.payload.number;\n    },\n\n    getMoreCommunity: (state, action) => {\n      return {\n        ...state,\n        list: [...state.list, ...action.payload.content],\n        start: action.payload.number,\n      };\n    },\n\n    getOneCommunity: (state, action) => {\n      state.list = action.payload;\n    },\n\n    editCommunity: (state, action) => {\n      console.log('수정 요청 완료!');\n    },\n\n    deleteCommunity: (state, action) => {\n      console.log('삭제 요청 완료!');\n    },\n  },\n});\n\nexport const {\n  addCommunity,\n  getCommunity,\n  editCommunity,\n  deleteCommunity,\n  getOneCommunity,\n  getMoreCommunity,\n} = community.actions;\nexport default community;"]},"metadata":{},"sourceType":"module"}