{"ast":null,"code":"// AWS S3\nimport AWS from 'aws-sdk';\nAWS.config.update({\n  region: 'ap-northeast-2',\n  credentials: new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: 'ap-northeast-2:a1d4d779-9019-4fa7-81e5-cecef26997bc'\n  })\n}); // action\n\nconst UPLOAD_IMAGE = 'IMAGE';\nconst SET_FILE = 'SET_FILE';\nconst DEL_FILE = 'DEL_FILE';\nconst SET_INITIAL_STATE = 'SET_INITIAL_STATE'; // action creator\n\nconst uploadImage = imageUrl => ({\n  type: UPLOAD_IMAGE,\n  imageUrl\n});\n\nconst setFile = file => ({\n  type: SET_FILE,\n  file\n});\n\nconst delFile = postId => ({\n  type: DEL_FILE,\n  postId\n});\n\nconst setInitialState = () => ({\n  type: SET_INITIAL_STATE\n}); // initial state\n\n\nconst initialState = {\n  imageUrl: [],\n  file: []\n}; // middleware\n\nconst uploadImageDB = callNext => {\n  return async function (dispatch, getState) {\n    const imgList = getState().image.file;\n\n    for (let i = 0; i < imgList.length; i++) {\n      const img = imgList[i];\n\n      if (typeof img !== 'object') {\n        dispatch(uploadImage(img));\n        continue;\n      }\n\n      const upload = new AWS.S3.ManagedUpload({\n        params: {\n          Bucket: 's3-animan',\n          Key: img.name,\n          Body: img\n        }\n      });\n      const promise = upload.promise();\n      await promise.then(data => {\n        dispatch(uploadImage(data.Location));\n      }).catch(error => {\n        console.log(error);\n        return alert('오류가 발생했습니다: ', error.message);\n      });\n    }\n\n    callNext();\n  };\n}; // reducer\n\n\nfunction image(state = initialState, action) {\n  switch (action.type) {\n    case UPLOAD_IMAGE:\n      return { ...state,\n        imageUrl: action.imageUrl\n      };\n\n    case SET_FILE: // return { ...state, file: [...state.file, ...action.file] };\n\n    case DEL_FILE:\n      const fileList = state.file.filter((img, idx) => action.index !== idx);\n      return { ...state,\n        file: fileList\n      };\n\n    case SET_INITIAL_STATE:\n      return {\n        imageUrl: [],\n        file: []\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default image;\nexport const imgActions = {\n  uploadImage,\n  setFile,\n  delFile,\n  setInitialState,\n  uploadImageDB\n};","map":{"version":3,"sources":["/Users/jinwoojung/Desktop/Streetcatshelter_Client/discatch/src/redux/modules/image.jsx"],"names":["AWS","config","update","region","credentials","CognitoIdentityCredentials","IdentityPoolId","UPLOAD_IMAGE","SET_FILE","DEL_FILE","SET_INITIAL_STATE","uploadImage","imageUrl","type","setFile","file","delFile","postId","setInitialState","initialState","uploadImageDB","callNext","dispatch","getState","imgList","image","i","length","img","upload","S3","ManagedUpload","params","Bucket","Key","name","Body","promise","then","data","Location","catch","error","console","log","alert","message","state","action","fileList","filter","idx","index","imgActions"],"mappings":"AAAA;AACA,OAAOA,GAAP,MAAgB,SAAhB;AAEAA,GAAG,CAACC,MAAJ,CAAWC,MAAX,CAAkB;AAChBC,EAAAA,MAAM,EAAE,gBADQ;AAEhBC,EAAAA,WAAW,EAAE,IAAIJ,GAAG,CAACK,0BAAR,CAAmC;AAC9CC,IAAAA,cAAc,EAAE;AAD8B,GAAnC;AAFG,CAAlB,E,CAOA;;AACA,MAAMC,YAAY,GAAG,OAArB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,iBAAiB,GAAG,mBAA1B,C,CAEA;;AACA,MAAMC,WAAW,GAAIC,QAAD,KAAe;AAAEC,EAAAA,IAAI,EAAEN,YAAR;AAAsBK,EAAAA;AAAtB,CAAf,CAApB;;AACA,MAAME,OAAO,GAAIC,IAAD,KAAW;AAAEF,EAAAA,IAAI,EAAEL,QAAR;AAAkBO,EAAAA;AAAlB,CAAX,CAAhB;;AACA,MAAMC,OAAO,GAAIC,MAAD,KAAa;AAAEJ,EAAAA,IAAI,EAAEJ,QAAR;AAAkBQ,EAAAA;AAAlB,CAAb,CAAhB;;AACA,MAAMC,eAAe,GAAG,OAAO;AAAEL,EAAAA,IAAI,EAAEH;AAAR,CAAP,CAAxB,C,CAEA;;;AACA,MAAMS,YAAY,GAAG;AACnBP,EAAAA,QAAQ,EAAE,EADS;AAEnBG,EAAAA,IAAI,EAAE;AAFa,CAArB,C,CAKA;;AACA,MAAMK,aAAa,GAAIC,QAAD,IAAc;AAClC,SAAO,gBAAgBC,QAAhB,EAA0BC,QAA1B,EAAoC;AACzC,UAAMC,OAAO,GAAGD,QAAQ,GAAGE,KAAX,CAAiBV,IAAjC;;AAEA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACG,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,YAAME,GAAG,GAAGJ,OAAO,CAACE,CAAD,CAAnB;;AAEA,UAAI,OAAOE,GAAP,KAAe,QAAnB,EAA6B;AAC3BN,QAAAA,QAAQ,CAACX,WAAW,CAACiB,GAAD,CAAZ,CAAR;AACA;AACD;;AAED,YAAMC,MAAM,GAAG,IAAI7B,GAAG,CAAC8B,EAAJ,CAAOC,aAAX,CAAyB;AACtCC,QAAAA,MAAM,EAAE;AACNC,UAAAA,MAAM,EAAE,WADF;AAENC,UAAAA,GAAG,EAAEN,GAAG,CAACO,IAFH;AAGNC,UAAAA,IAAI,EAAER;AAHA;AAD8B,OAAzB,CAAf;AAQA,YAAMS,OAAO,GAAGR,MAAM,CAACQ,OAAP,EAAhB;AAEA,YAAMA,OAAO,CACVC,IADG,CACGC,IAAD,IAAU;AACdjB,QAAAA,QAAQ,CAACX,WAAW,CAAC4B,IAAI,CAACC,QAAN,CAAZ,CAAR;AACD,OAHG,EAIHC,KAJG,CAIIC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,eAAOG,KAAK,CAAC,cAAD,EAAiBH,KAAK,CAACI,OAAvB,CAAZ;AACD,OAPG,CAAN;AAQD;;AACDzB,IAAAA,QAAQ;AACT,GA/BD;AAgCD,CAjCD,C,CAmCA;;;AACA,SAASI,KAAT,CAAesB,KAAK,GAAG5B,YAAvB,EAAqC6B,MAArC,EAA6C;AAC3C,UAAQA,MAAM,CAACnC,IAAf;AACE,SAAKN,YAAL;AACE,aAAO,EAAE,GAAGwC,KAAL;AAAYnC,QAAAA,QAAQ,EAAEoC,MAAM,CAACpC;AAA7B,OAAP;;AACF,SAAKJ,QAAL,CAHF,CAII;;AACF,SAAKC,QAAL;AACE,YAAMwC,QAAQ,GAAGF,KAAK,CAAChC,IAAN,CAAWmC,MAAX,CAAkB,CAACtB,GAAD,EAAMuB,GAAN,KAAcH,MAAM,CAACI,KAAP,KAAiBD,GAAjD,CAAjB;AAEA,aAAO,EAAE,GAAGJ,KAAL;AAAYhC,QAAAA,IAAI,EAAEkC;AAAlB,OAAP;;AACF,SAAKvC,iBAAL;AACE,aAAO;AAAEE,QAAAA,QAAQ,EAAE,EAAZ;AAAgBG,QAAAA,IAAI,EAAE;AAAtB,OAAP;;AAEF;AACE,aAAOgC,KAAP;AAbJ;AAeD;;AAED,eAAetB,KAAf;AAEA,OAAO,MAAM4B,UAAU,GAAG;AACxB1C,EAAAA,WADwB;AAExBG,EAAAA,OAFwB;AAGxBE,EAAAA,OAHwB;AAIxBE,EAAAA,eAJwB;AAKxBE,EAAAA;AALwB,CAAnB","sourcesContent":["// AWS S3\nimport AWS from 'aws-sdk';\n\nAWS.config.update({\n  region: 'ap-northeast-2',\n  credentials: new AWS.CognitoIdentityCredentials({\n    IdentityPoolId: 'ap-northeast-2:a1d4d779-9019-4fa7-81e5-cecef26997bc',\n  }),\n});\n\n// action\nconst UPLOAD_IMAGE = 'IMAGE';\nconst SET_FILE = 'SET_FILE';\nconst DEL_FILE = 'DEL_FILE';\nconst SET_INITIAL_STATE = 'SET_INITIAL_STATE';\n\n// action creator\nconst uploadImage = (imageUrl) => ({ type: UPLOAD_IMAGE, imageUrl });\nconst setFile = (file) => ({ type: SET_FILE, file });\nconst delFile = (postId) => ({ type: DEL_FILE, postId });\nconst setInitialState = () => ({ type: SET_INITIAL_STATE });\n\n// initial state\nconst initialState = {\n  imageUrl: [],\n  file: [],\n};\n\n// middleware\nconst uploadImageDB = (callNext) => {\n  return async function (dispatch, getState) {\n    const imgList = getState().image.file;\n\n    for (let i = 0; i < imgList.length; i++) {\n      const img = imgList[i];\n\n      if (typeof img !== 'object') {\n        dispatch(uploadImage(img));\n        continue;\n      }\n\n      const upload = new AWS.S3.ManagedUpload({\n        params: {\n          Bucket: 's3-animan',\n          Key: img.name,\n          Body: img,\n        },\n      });\n\n      const promise = upload.promise();\n\n      await promise\n        .then((data) => {\n          dispatch(uploadImage(data.Location));\n        })\n        .catch((error) => {\n          console.log(error);\n          return alert('오류가 발생했습니다: ', error.message);\n        });\n    }\n    callNext();\n  };\n};\n\n// reducer\nfunction image(state = initialState, action) {\n  switch (action.type) {\n    case UPLOAD_IMAGE:\n      return { ...state, imageUrl: action.imageUrl };\n    case SET_FILE:\n      // return { ...state, file: [...state.file, ...action.file] };\n    case DEL_FILE:\n      const fileList = state.file.filter((img, idx) => action.index !== idx);\n\n      return { ...state, file: fileList };\n    case SET_INITIAL_STATE:\n      return { imageUrl: [], file: [] };\n\n    default:\n      return state;\n  }\n}\n\nexport default image;\n\nexport const imgActions = {\n  uploadImage,\n  setFile,\n  delFile,\n  setInitialState,\n  uploadImageDB,\n};"]},"metadata":{},"sourceType":"module"}