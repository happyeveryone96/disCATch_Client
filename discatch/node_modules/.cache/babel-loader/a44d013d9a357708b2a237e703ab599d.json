{"ast":null,"code":"// library\nimport { createStore, combineReducers, applyMiddleware } from \"redux\"; // middleware\n\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\"; // redux router\n\nimport { createBrowserHistory } from \"history\";\nimport { connectRouter } from \"connected-react-router\"; // reducer\n\nconst history = createBrowserHistory();\nconst rootReducer = combineReducers({\n  router: connectRouter(history)\n}); // history 넣기, 로거사용\n\nconst middleware = [thunk.withExtraArgument({\n  history\n}), logger]; // 미들웨어와 리듀서 묶어서 store생성\n\nconst store = createStore(rootReducer, applyMiddleware(...middleware));\nexport { history };\nexport default store;","map":{"version":3,"sources":["/Users/jinwoojung/Desktop/Streetcatshelter_Client/discatch/src/redux/configureStore.jsx"],"names":["createStore","combineReducers","applyMiddleware","thunk","logger","createBrowserHistory","connectRouter","history","rootReducer","router","middleware","withExtraArgument","store"],"mappings":"AAAA;AACA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D,C,CAEA;;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,cAAnB,C,CAEA;;AACA,SAASC,oBAAT,QAAqC,SAArC;AACA,SAASC,aAAT,QAA8B,wBAA9B,C,CAEA;;AAEA,MAAMC,OAAO,GAAGF,oBAAoB,EAApC;AAEA,MAAMG,WAAW,GAAGP,eAAe,CAAC;AAClCQ,EAAAA,MAAM,EAAEH,aAAa,CAACC,OAAD;AADa,CAAD,CAAnC,C,CAIA;;AACA,MAAMG,UAAU,GAAG,CAACP,KAAK,CAACQ,iBAAN,CAAwB;AAAEJ,EAAAA;AAAF,CAAxB,CAAD,EAAuCH,MAAvC,CAAnB,C,CAEA;;AACA,MAAMQ,KAAK,GAAGZ,WAAW,CAACQ,WAAD,EAAcN,eAAe,CAAC,GAAGQ,UAAJ,CAA7B,CAAzB;AACA,SAASH,OAAT;AAEA,eAAeK,KAAf","sourcesContent":["// library\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\n\n// middleware\nimport thunk from \"redux-thunk\";\nimport logger from \"redux-logger\";\n\n// redux router\nimport { createBrowserHistory } from \"history\";\nimport { connectRouter } from \"connected-react-router\";\n\n// reducer\n\nconst history = createBrowserHistory();\n\nconst rootReducer = combineReducers({\n  router: connectRouter(history),\n});\n\n// history 넣기, 로거사용\nconst middleware = [thunk.withExtraArgument({ history }), logger];\n\n// 미들웨어와 리듀서 묶어서 store생성\nconst store = createStore(rootReducer, applyMiddleware(...middleware));\nexport { history };\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}